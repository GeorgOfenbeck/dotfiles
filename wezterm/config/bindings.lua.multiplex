local wezterm = require("wezterm")
local platform = require("utils.platform")()
local backdrops = require("utils.backdrops")
local act = wezterm.action

local mod = {}

mod.MEH = "CTRL|SHIFT|ALT"

local function is_vim(pane)
	local process_info = pane:get_foreground_process_info()
	local process_name = process_info and process_info.name
	wezterm.log_info("process_name: " .. process_name)
	wezterm.log_info("WEZTERM_PROG: " .. pane:get_user_vars().WEZTERM_PROG)
	local wezterm_prog = pane:get_user_vars().WEZTERM_PROG
	if wezterm_prog then
		return wezterm_prog:match("^nvim") or wezterm_prog:match("^vim")
	end
	return process_name == "nvim" or process_name == "vim"
end

local function split_nav(key)
	return {
		key = key,
		mods = mod.MEH,
		action = wezterm.action_callback(function(win, pane)
			wezterm.log_info("split_nav callback called with key: " .. key)
			if is_vim(pane) then
				wezterm.log_info("vim pane " .. key)
				-- pass the keys through to vim/nvim
				win:perform_action({
					SendKey = { key = key, mods = mod.MEH },
				}, pane)
			else
				wezterm.log_info("regular pane " .. key)
				if key == "u" then
					win:perform_action({ ActivatePaneDirection = "Up" }, pane)
				elseif key == "e" then
					win:perform_action({ ActivatePaneDirection = "Down" }, pane)
				elseif key == "h" then
					win:perform_action({ ActivatePaneDirection = "Left" }, pane)
				elseif key == "a" then
					win:perform_action({ ActivatePaneDirection = "Right" }, pane)
				elseif key == "j" then
					win:perform_action({ AdjustPaneSize = { "Left", 3 } }, pane)
				elseif key == "8" then
					win:perform_action({ AdjustPaneSize = { "Up", 3 } }, pane)
				elseif key == "i" then
					win:perform_action({ AdjustPaneSize = { "Right", 3 } }, pane)
				elseif key == "," then
					win:perform_action({ AdjustPaneSize = { "Down", 3 } }, pane)
				end
			end
		end),
	}
end

local keys = {
	-- misc/useful --
	{ key = "F1", mods = "NONE", action = "ActivateCopyMode" },
	{ key = "F2", mods = "NONE", action = act.ActivateCommandPalette },
	{ key = "F3", mods = "NONE", action = act.ShowLauncher },
	{ key = "F4", mods = "NONE", action = act.ShowLauncherArgs({ flags = "FUZZY|TABS" }) },
	{
		key = "F5",
		mods = "NONE",
		action = act.ShowLauncherArgs({ flags = "FUZZY|WORKSPACES" }),
	},
	{ key = "F12", mods = "NONE", action = act.ShowDebugOverlay },
	{ key = "f", mods = mod.MEH, action = act.Search({ CaseInSensitiveString = "" }) },
	{
		key = "x",
		mods = mod.MEH,
		action = wezterm.action.QuickSelectArgs({
			label = "open url",
			patterns = {
				"https?://\\S+",
			},
			action = wezterm.action_callback(function(window, pane)
				local url = window:get_selection_text_for_pane(pane)
				wezterm.log_info("opening: " .. url)
				wezterm.open_with(url)
			end),
		}),
	},

	-- copy/paste --
	{ key = "c", mods = "CTRL|SHIFT", action = act.CopyTo("Clipboard") },
	{ key = "v", mods = "CTRL|SHIFT", action = act.PasteFrom("Clipboard") },

	-- tabs --
	-- tabs: spawn+close
	{ key = "9", mods = mod.MEH, action = act.SpawnTab("DefaultDomain") },
	{ key = "0", mods = mod.MEH, action = act.CloseCurrentTab({ confirm = false }) },

	-- tabs: navigation
	{ key = "l", mods = mod.MEH, action = act.ActivateTabRelative(-1) },
	{ key = "o", mods = mod.MEH, action = act.ActivateTabRelative(1) },
	{ key = "m", mods = mod.MEH, action = act.MoveTabRelative(-1) },
	{ key = "mapped:.", mods = mod.MEH, action = act.MoveTabRelative(1) },

	-- window --
	-- spawn windows
	--{ key = "n", mods = mod.MEH, action = act.SpawnWindow },

	-- panes --
	-- panes: split panes
	{
		key = "6",
		mods = mod.MEH,
		action = act.SplitVertical({ domain = "CurrentPaneDomain" }),
	},
	{
		key = "q",
		mods = mod.MEH,
		action = act.SplitHorizontal({ domain = "CurrentPaneDomain" }),
	},

	-- panes: zoom+close pane
	{ key = "z", mods = mod.MEH, action = act.TogglePaneZoomState },
	{ key = "y", mods = mod.MEH, action = act.CloseCurrentPane({ confirm = false }) },

	-- panes: navigation
	split_nav("u"),
	split_nav("e"),
	split_nav("h"),
	split_nav("a"),
	split_nav("j"),
	split_nav("8"),
	split_nav(","),
	split_nav("i"),
	--{ key = "u", mods = mod.MEH, action = act.ActivatePaneDirection("Up") },
	--{ key = "e", mods = mod.MEH, action = act.ActivatePaneDirection("Down") },
	--{ key = "h", mods = mod.MEH, action = act.ActivatePaneDirection("Left") },
	--{ key = "a", mods = mod.MEH, action = act.ActivatePaneDirection("Right") },
	{
		key = "p",
		mods = mod.MEH,
		action = act.PaneSelect({ alphabet = "1234567890", mode = "SwapWithActiveKeepFocus" }),
	},

	-- key-tables --
	-- resizes fonts
	{
		key = "f",
		mods = "LEADER",
		action = act.ActivateKeyTable({
			name = "resize_font",
			one_shot = false,
			timemout_miliseconds = 1000,
		}),
	},
	-- resize panes
	{
		key = "p",
		mods = "LEADER",
		action = act.ActivateKeyTable({
			name = "resize_pane",
			one_shot = false,
			timemout_miliseconds = 1000,
		}),
	},
}

local key_tables = {
	resize_font = {
		{ key = "k", action = act.IncreaseFontSize },
		{ key = "j", action = act.DecreaseFontSize },
		{ key = "r", action = act.ResetFontSize },
		{ key = "Escape", action = "PopKeyTable" },
		{ key = "q", action = "PopKeyTable" },
	},
	resize_pane = {
		{ key = "k", action = act.AdjustPaneSize({ "Up", 1 }) },
		{ key = "j", action = act.AdjustPaneSize({ "Down", 1 }) },
		{ key = "h", action = act.AdjustPaneSize({ "Left", 1 }) },
		{ key = "l", action = act.AdjustPaneSize({ "Right", 1 }) },
		{ key = "Escape", action = "PopKeyTable" },
		{ key = "q", action = "PopKeyTable" },
	},
}

local mouse_bindings = {
	-- Ctrl-click will open the link under the mouse cursor
	{
		event = { Up = { streak = 1, button = "Left" } },
		mods = "CTRL",
		action = act.OpenLinkAtMouseCursor,
	},
}

return {
	key_map_preference = "Physical",
	disable_default_key_bindings = false,
	leader = { key = "Space", mods = mod.MEH },
	keys = keys,
	key_tables = key_tables,
	mouse_bindings = mouse_bindings,
}
